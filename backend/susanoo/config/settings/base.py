"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 4.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

import pathlib
from datetime import timedelta

import environ

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = pathlib.Path(__file__).resolve(strict=True)
ROOT_DIR = BASE_DIR.parent.parent.parent
APPS_DIR = ROOT_DIR / 'susanoo'

env = environ.Env()
READ_DOT_ENV_FILE = env.bool("DJANGO_READ_DOT_ENV_FILE", default=True)
if READ_DOT_ENV_FILE:
    # OS environment variables take precedence over variables from .env
    env.read_env(str(BASE_DIR / ".env" / ".local"))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure--ddf&r#+9zqcfoi0tzkg1qou6nih$+a=9ouq=9axdvuy2o-p0t'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool('DJANGO_DEBUG', default=True)

ALLOWED_HOSTS = ['*']

# Application definition
DJANGO_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
]

THIRD_PARTY_APPS = [
    "crispy_forms",
    "crispy_bootstrap5",
    "drf_spectacular",

    'django_filters',
    'drf_yasg',
    'corsheaders',
    'import_export',
    'django_cleanup.apps.CleanupConfig',
    'storages',

    # # allauth core:
    # 'allauth.account',
    # 'allauth.socialaccount',
    # 'allauth.headless',  # headless (APIâ€‘only)
    # # Social providers:
    # 'allauth.socialaccount.providers.google',
    # # 'allauth.socialaccount.providers.linkedin',

    # rest framework apps
    "rest_framework",
    'rest_framework_simplejwt',

    # other util apps
    "phonenumber_field"
]

LOCAL_APPS = [
    'susanoo.core',
    'susanoo.interview',
    'susanoo.job',
    'susanoo.message',
    'susanoo.company',
    'susanoo.stage',
    'susanoo.provider',
    'susanoo.usage',
    'susanoo.feedback',
    'susanoo.waitlist',
    'susanoo.entity',
    'susanoo.review',
    'susanoo.activity',
    'susanoo.recording',
    'susanoo.question',

    'rasengan.linguistic',
    'rasengan.graph',

    'izanagi.user',
    'izanagi.social',
    'izanagi.billing',
    'izanagi.organization',
]
# Apps that user creates

INSTALLED_APPS = DJANGO_APPS + LOCAL_APPS + THIRD_PARTY_APPS

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    # Local app middleware
    'izanagi.user.middlewares.CheckEmailVerifiedMiddleware',
    'izanagi.organization.middlewares.OrganizationMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [str(ROOT_DIR / 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'

# DATABASES
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/dev/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': env('POSTGRES_DB', default='postgres'),
        'USER': env('POSTGRES_USER', default='postgres'),
        'PASSWORD': env('POSTGRES_PASSWORD', default=''),
        'HOST': env('POSTGRES_HOST', default='localhost'),
        'PORT': env('POSTGRES_PORT', default=5432)
    }
}
# DATABASES = { "default": env.db("DATABASE_URL") }
# DATABASES["default"]["ATOMIC_REQUESTS"] = True

ADMIN_URL = 'admin/'

# https://docs.djangoproject.com/en/stable/ref/settings/#std:setting-DEFAULT_AUTO_FIELD
# DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# AUTH
# ------------------------------------------------------------------------------
#
AUTH_USER_MODEL = 'user.User'
AUTHENTICATION_BACKENDS = [
    # Default django auth
    'django.contrib.auth.backends.ModelBackend',

    # Email backend
    'izanagi.user.backends.EmailBackend'

    # allauth auth backend
    # 'allauth.account.auth_backends.AuthenticationBackend',
]

# ALL AUTH
# ------------------------------------------------------------------------------
# https://docs.allauth.org/en/latest/account/configuration.html
SITE_ID = 1
# # AUTHENTICATION_METHOD = 'username_email'
# ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 1
# # ACCOUNT_EMAIL_REQUIRED = True
# # ACCOUNT_USERNAME_REQUIRED = False
# # ACCOUNT_AUTHENTICATION_METHOD = 'email'
# ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
#
# # Headless settings:
# HEADLESS_ONLY = True        # disable template views
# HEADLESS_ALLOW_BEARER_TOKEN = True        # accept Authorization: Bearer <token>
# HEADLESS_TOKEN_STRATEGY = 'izanagi.user.adapters.JWTTokenStrategy'
#
# ACCOUNT_SIGNUP_FIELDS = ['first_name*', 'last_name*', 'email*', 'password1*', 'password2*']
# ACCOUNT_USERNAME_REQUIRED = False
# ACCOUNT_EMAIL_REQUIRED = True
# ACCOUNT_UNIQUE_EMAIL = True
# ACCOUNT_LOGIN_METHODS = {'username', 'email'}
# ACCOUNT_ADAPTER = 'izanagi.user.adapters.AccountAdapter'
#
# SOCIALACCOUNT_PROVIDERS = {
#     'google': {
#         'APP': {
#             'client_id': env('GOOGLE_CLIENT_ID'),
#             'secret':    env('GOOGLE_CLIENT_SECRET'),
#         }
#     },
#     'linkedin': {
#         'APP': {
#             'client_id': '<LINKEDIN_ID>',
#             'secret':    '<LINKEDIN_SECRET>',
#         }
#     }
# }
# SOCIALACCOUNT_AUTO_SIGNUP = True    # skip extra signup step if possible
# SOCIALACCOUNT_EMAIL_AUTHENTICATION = True    # connect to existing user if email matches
# SOCIALACCOUNT_EMAIL_AUTHENTICATION_AUTO_CONNECT = True
# SOCIALACCOUNT_EMAIL_REQUIRED = True
# SOCIALACCOUNT_ADAPTER = 'izanagi.user.adapters.SocialAccountAdapter'


# REST FRAMEWORK
# ------------------------------------------------------------------------------
# https://www.django-rest-framework.org/api-guide/settings/
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_FILTER_BACKENDS': (
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.OrderingFilter'
    ),
    'DEFAULT_PARSER_CLASSES': (
        'rest_framework.parsers.JSONParser',
    ),
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema',
    # 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'DEFAULT_PAGINATION_CLASS': 'common.pagination.PageNumberPaginationWithPageCount',
    'PAGE_SIZE': env('PAGE_SIZE', default=10),
    'EXCEPTION_HANDLER': 'common.exception_handlers.exception_handler',
}

# REST FRAMEWORK SIMPLEJWT
# ------------------------------------------------------------------------------
# https://django-rest-framework-simplejwt.readthedocs.io/en/latest/settings.html
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(days=7),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=15),
    "UPDATE_LAST_LOGIN": True,

    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
    "VERIFYING_KEY": "",

    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication.default_user_authentication_rule",

    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
    "TOKEN_USER_CLASS": "rest_framework_simplejwt.models.TokenUser",
}

# Password validation
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/4.0/topics/i18n/
LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Default primary key field type
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'

# CORS Settings
# ------------------------------------------------------------------------------
#
CORS_ALLOW_ALL_ORIGINS = True
CORS_ORIGIN_ALLOW_ALL = True

CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-organization',
    'access-control-allow-origin',
]

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/
STATIC_ROOT = str(ROOT_DIR / "staticfiles")
STATIC_URL = '/static/'
STATICFILES_DIRS = [str(APPS_DIR / "static"), ]
# https://docs.djangoproject.com/en/dev/ref/contrib/staticfiles/#staticfiles-finders
STATICFILES_FINDERS = [
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
]

# Media Fies (Images)
# ------------------------------------------------------------------------------
#
MEDIA_ROOT = str(APPS_DIR / 'media')
MEDIA_URL = '/media/'


CRISPY_ALLOWED_TEMPLATE_PACKS = ('bootstrap', 'uni_form', 'bootstrap3', 'bootstrap4', 'bootstrap5', )
CRISPY_TEMPLATE_PACK = 'bootstrap5'


# SECURITY
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/dev/ref/settings/#session-cookie-httponly
SESSION_COOKIE_HTTPONLY = True
# https://docs.djangoproject.com/en/dev/ref/settings/#csrf-cookie-httponly
CSRF_COOKIE_HTTPONLY = True
# https://docs.djangoproject.com/en/dev/ref/settings/#secure-browser-xss-filter
SECURE_BROWSER_XSS_FILTER = True
# https://docs.djangoproject.com/en/dev/ref/settings/#x-frame-options
X_FRAME_OPTIONS = "DENY"


# Interview Settings
TOKENS = {
    'START': '<START>',
    'END': '<END>'
}

# Recording Settings:
INTERVIEW_RECORDING = {
    'VIDEO': {
        'CHUNK_PATH': 'interviews/{interview}/videos/chunks/',
        'HLS_PATH': 'interviews/{interview}/videos/hls/'
    },
    'SCREEN': {
        'CHUNK_PATH': 'interviews/{interview}/screens/chunks/',
        'HLS_PATH': 'interviews/{interview}/screens/hls/'
    },
    'AUDIO': {
        'AI': 'interviews/{interview}/audios/ai/',
        'USER': 'interviews/{interview}/audios/user/',
        'CHUNK_PATH': 'interviews/{interview}/audios/chunks/{uid}/',
    }
}

JWT_STRATEGY = 'izanagi.user.adapters.JWTTokenStrategy'
SOCIAL_ACCOUNT_ADAPTER = 'izanagi.user.adapters.SocialAccountAdapter'
SOCIAL_AUTH_CONNECT = env.bool('SOCIAL_AUTH_CONNECT', True)
SOCIAL_AUTH_PROVIDERS = {
    'google': {
        'CLIENT_ID':     env('GOOGLE_CLIENT_ID'),
        'CLIENT_SECRET': env('GOOGLE_CLIENT_SECRET'),
        'AUTH_URL':      'https://accounts.google.com/o/oauth2/v2/auth',
        'TOKEN_URL':     'https://oauth2.googleapis.com/token',
        'USERINFO_URL':  'https://openidconnect.googleapis.com/v1/userinfo',
        'SCOPES':        ['openid', 'email', 'profile'],
    },
    'linkedin': {
        'CLIENT_ID':     env('LINKEDIN_CLIENT_ID'),
        'CLIENT_SECRET': env('LINKEDIN_CLIENT_SECRET'),
        'AUTH_URL':      'https://www.linkedin.com/oauth/v2/authorization',
        'TOKEN_URL':     'https://www.linkedin.com/oauth/v2/accessToken',
        'USERINFO_URLS': 'https://api.linkedin.com/v2/userinfo',
        'SCOPES':        ['openid', 'profile', 'email', 'w_member_social'],
    },
}
